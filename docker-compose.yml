version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: myerp_postgres
    environment:
      POSTGRES_DB: myerp_db
      POSTGRES_USER: myerp
      POSTGRES_PASSWORD: myerp_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myerp -d myerp_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - myerp_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: myerp_redis
    command: redis-server --requirepass myerp_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - myerp_network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: myerp_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - myerp_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: myerp_backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://myerp:myerp_password@postgres:5432/myerp_db
      REDIS_URL: redis://:myerp_redis_password@redis:6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_USE_SSL: false
      JWT_SECRET: your-super-secret-jwt-key
      JWT_EXPIRY: 1h
      REFRESH_TOKEN_EXPIRY: 7d
      API_PORT: 4000
      FRONTEND_URL: http://localhost:3000
    ports:
      - "4000:4000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - myerp_network
    command: npm run dev

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: myerp_frontend
    environment:
      REACT_APP_API_URL: http://localhost:4000/api
      REACT_APP_MINIO_URL: http://localhost:9000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - myerp_network
    command: npm start

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: myerp_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - myerp_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: myerp_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - myerp_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: myerp_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - myerp_network

  # Backup Service
  backup:
    build:
      context: ./docker/backup
      dockerfile: Dockerfile
    container_name: myerp_backup
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: myerp_db
      POSTGRES_USER: myerp
      POSTGRES_PASSWORD: myerp_password
      BACKUP_DIR: /backups
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      RETENTION_DAYS: 30
    volumes:
      - ./backups:/backups
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - myerp_network

  # Mailhog for Development Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: myerp_mailhog
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI
    networks:
      - myerp_network

networks:
  myerp_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data: